{"version":3,"file":"crypto-pro-api-sync.js","sourceRoot":"","sources":["crypto-pro-api-sync.ts"],"names":[],"mappings":"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","sourcesContent":["import {CadesMethods} from \"./helpers/cades-methods\";\nimport {\n\tCADESCOM_CADES_TYPE,\n\tCADESCOM_CONTENT_ENCODING_TYPE,\n\tCAPICOM_CERTIFICATE_FIND_TYPE, CAPICOM_PROPID,\n\tCAPICOM_STORE_LOCATION,\n\tCAPICOM_STORE_NAME,\n\tCAPICOM_STORE_OPEN_MODE,\n\tIAbout, ICertificates, ICPSigner, IStore,\n} from \"@delagen/cadesplugin\";\nimport {CertificateAdjuster} from \"./helpers\";\nimport {ICadesSignedDataExtended, ICertificateExtended} from \"./extensions\";\nimport {ICryptoProApi} from \"./interfaces\";\n\nexport class CryptoProApiSync extends CadesMethods implements ICryptoProApi {\n\tpublic about(): IAbout {\n\t\ttry {\n\t\t\treturn this.oAbout() as IAbout;\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic getCertsList(): CertificateAdjuster[] {\n\t\ttry {\n\t\t\tconst store: IStore = this.oStore() as IStore;\n\t\t\tstore.Open(\n\t\t\t\tCAPICOM_STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n\t\t\t\tCAPICOM_STORE_NAME.CAPICOM_MY_STORE,\n\t\t\t\tCAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n\t\t\t);\n\t\t\tconst certificates: ICertificates = store.Certificates;\n\n\t\t\tif (!certificates) {\n\t\t\t\tthrow new Error(\"Нет доступных сертификатов\");\n\t\t\t}\n\n\t\t\tconst findCertificate: ICertificates = certificates.Find(CAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_TIME_VALID);\n\t\t\tconst findCertsWithPrivateKey: ICertificates = findCertificate.Find(\n\t\t\t\tCAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,\n\t\t\t\tCAPICOM_PROPID.CAPICOM_PROPID_KEY_PROV_INFO\n\t\t\t);\n\n\t\t\tconst count: number = findCertsWithPrivateKey.Count;\n\n\t\t\tif (!count) {\n\t\t\t\tthrow new Error(\"Нет сертификатов с приватным ключом\");\n\t\t\t}\n\n\t\t\tconst countArray: Array<null> = Array(count).fill(null);\n\n\t\t\tstore.Close();\n\n\t\t\treturn countArray.map( (_, index: number) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst cert: ICertificateExtended = findCertsWithPrivateKey.Item(index + 1) as ICertificateExtended;\n\t\t\t\t\treturn new CertificateAdjuster(\n\t\t\t\t\t\tcert.Thumbprint,\n\t\t\t\t\t\tcert.SubjectName,\n\t\t\t\t\t\tcert.IssuerName,\n\t\t\t\t\t\tcert.PrivateKey,\n\t\t\t\t\t\tnew Date(cert.ValidFromDate),\n\t\t\t\t\t\tnew Date(cert.ValidToDate),\n\t\t\t\t\t\tcert.SerialNumber\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`При переборе сертификатов произошла ошибка: ${e.message}`)\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic  currentCadesCert(thumbprint: string): ICertificateExtended {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\t\t\tconst store: IStore = this.oStore() as IStore;\n\t\t\tstore.Open(\n\t\t\t\tCAPICOM_STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n\t\t\t\tCAPICOM_STORE_NAME.CAPICOM_MY_STORE,\n\t\t\t\tCAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n\t\t\t);\n\n\t\t\tconst certificates: ICertificates = store.Certificates;\n\t\t\tconst count: number = certificates.Count;\n\t\t\tconst findCertificate: ICertificates = certificates.Find(\n\t\t\t\tCAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_SHA1_HASH,\n\t\t\t\tthumbprint\n\t\t\t);\n\n\t\t\tif (count) {\n\t\t\t\tconst certificateItem: ICertificateExtended = findCertificate.Item(1) as ICertificateExtended;\n\t\t\t\tstore.Close();\n\n\t\t\t\treturn certificateItem;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Произошла ошибка при получении cертификата по thumbprint значению: ${thumbprint}`);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic  getCert(thumbprint: string): CertificateAdjuster {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\n\t\t\tconst certList = this.getCertsList();\n\n\t\t\tfor (let i = 0; i < certList.length; i++) {\n\t\t\t\tif (thumbprint === certList[i].thumbprint) {\n\t\t\t\t\treturn certList[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Не найдено сертификата по thumbprint значению: ${thumbprint}`);\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic  signBase64(thumbprint: string, base64: string, bDetached?: boolean, coSign?: boolean): string {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\n\t\t\tconst currentCert: ICertificateExtended = this.currentCadesCert(thumbprint) as ICertificateExtended;\n\t\t\tconst oSigner: ICPSigner = this.oSigner() as ICPSigner;\n\t\t\toSigner.Certificate = currentCert;\n\n\t\t\tconst oSignedData: ICadesSignedDataExtended = this.oSignedData() as ICadesSignedDataExtended;\n\t\t\toSignedData.Content = base64;\n\t\t\toSignedData.ContentEncoding = CADESCOM_CONTENT_ENCODING_TYPE.CADESCOM_BASE64_TO_BINARY;\n\n\t\t\tif (coSign) {\n\t\t\t\toSignedData.VerifyCades(base64, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES);\n\t\t\t\treturn oSignedData.CoSignCades(oSigner, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES);\n\t\t\t}\n\n\t\t\treturn oSignedData.SignCades(oSigner, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES, bDetached);\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n}\n\n"]}