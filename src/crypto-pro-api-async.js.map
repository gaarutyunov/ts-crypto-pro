{"version":3,"file":"crypto-pro-api-async.js","sourceRoot":"","sources":["crypto-pro-api-async.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAC,mBAAmB,EAAC,MAAM,WAAW,CAAC;AAc9C;IAAuC,6CAAY;IAAnD;;IA4IA,CAAC;IA3Ia,iCAAK,GAAlB;;;;;;;wBAES,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;4BAA1B,sBAAO,SAAkC,EAAC;;;wBAE1C,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;KAE5B;IAEY,wCAAY,GAAzB;;;;;;;;wBAE6B,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAAxC,KAAK,GAAgB,SAAkC;wBAC7D,qBAAM,KAAK,CAAC,IAAI,6GAIf,EAAA;;wBAJD,SAIC,CAAC;wBACuC,qBAAM,KAAK,CAAC,YAAY,EAAA;;wBAA3D,YAAY,GAAuB,SAAwB;wBAEjE,IAAI,CAAC,YAAY,EAAE;4BAClB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;yBAC9C;wBAE2C,qBAAM,YAAY,CAAC,IAAI,6CAAmE,EAAA;;wBAAhI,eAAe,GAAuB,SAA0F;wBAClF,qBAAM,eAAe,CAAC,IAAI,0FAG7E,EAAA;;wBAHK,4BAA8C,SAGnD;wBAEqB,qBAAM,yBAAuB,CAAC,KAAK,EAAA;;wBAAnD,KAAK,GAAW,SAAmC;wBAEzD,IAAI,CAAC,KAAK,EAAE;4BACX,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;yBACvD;wBAEK,UAAU,GAAgB,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAET,qBAAM,OAAO,CAAC,GAAG,CAC/D,UAAU,CAAC,GAAG,CAAC,UAAO,CAAC,EAAE,KAAa;;;;;;4CAEI,qBAAM,yBAAuB,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAA;;4CAA/E,IAAI,GAA8B,SAA0E;iDACvG,mBAAmB;4CAC7B,qBAAM,IAAI,CAAC,UAAU,EAAA;;0DAArB,SAAqB;4CACrB,qBAAM,IAAI,CAAC,WAAW,EAAA;;4DAAtB,SAAsB;4CACtB,qBAAM,IAAI,CAAC,UAAU,EAAA;;4DAArB,SAAqB;4CACrB,qBAAM,IAAI,CAAC,UAAU,EAAA;;4DAArB,SAAqB;iDACjB,IAAI;4CAAC,qBAAM,IAAI,CAAC,aAAa,EAAA;;4DAAjC,cAAI,IAAI,WAAC,SAAwB,KAAC;iDAC9B,IAAI;4CAAC,qBAAM,IAAI,CAAC,WAAW,EAAA;;4DAA/B,cAAI,IAAI,WAAC,SAAsB,KAAC;4CAChC,qBAAM,IAAI,CAAC,YAAY,EAAA;gDAPxB,sBAAO,cAAI,mBAAmB,aAO7B,SAAuB,MACvB,EAAC;;;4CAEF,MAAM,IAAI,KAAK,CAAC,+OAA+C,GAAC,CAAC,OAAS,CAAC,CAAA;;;;iCAE5E,CAAC,CACF,EAAA;;wBAjBK,eAAe,GAA0B,SAiB9C;wBAED,qBAAM,KAAK,CAAC,KAAK,EAAE,EAAA;;wBAAnB,SAAmB,CAAC;wBAEpB,sBAAO,eAAe,EAAC;;;wBAEvB,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;KAE5B;IAEY,4CAAgB,GAA7B,UAA8B,UAAkB;;;;;;;wBAE9C,IAAI,CAAC,UAAU,EAAE;4BAChB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;yBAC9D;wBAC0B,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAAxC,KAAK,GAAgB,SAAkC;wBAC7D,qBAAM,KAAK,CAAC,IAAI,6GAIf,EAAA;;wBAJD,SAIC,CAAC;wBAEuC,qBAAM,KAAK,CAAC,YAAY,EAAA;;wBAA3D,YAAY,GAAuB,SAAwB;wBAC3C,qBAAM,YAAY,CAAC,KAAK,EAAA;;wBAAxC,KAAK,GAAW,SAAwB;wBACF,qBAAM,YAAY,CAAC,IAAI,6CAElE,UAAU,CACV,EAAA;;wBAHK,eAAe,GAAuB,SAG3C;6BAEG,KAAK,EAAL,wBAAK;wBAC2C,qBAAM,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAA;;wBAA1E,eAAe,GAA8B,SAA0D;wBAC7G,qBAAM,KAAK,CAAC,KAAK,EAAE,EAAA;;wBAAnB,SAAmB,CAAC;wBAEb,qBAAM,eAAe,EAAA;4BAA5B,sBAAO,SAAqB,EAAC;4BAE7B,MAAM,IAAI,KAAK,CAAC,mTAAsE,UAAY,CAAC,CAAC;;;;wBAGrG,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;KAE5B;IAEY,mCAAO,GAApB,UAAqB,UAAkB;;;;;;;wBAErC,IAAI,CAAC,UAAU,EAAE;4BAChB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;yBAC9D;wBAEgB,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;wBAApC,QAAQ,GAAG,SAAyB;wBAEjC,CAAC,GAAG,CAAC;;;6BAAE,CAAA,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAA;6BAC9B,CAAA,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA,EAArC,wBAAqC;wBACjC,qBAAM,QAAQ,CAAC,CAAC,CAAC,EAAA;4BAAxB,sBAAO,SAAiB,EAAC;;wBAFU,CAAC,EAAE,CAAA;;4BAMxC,MAAM,IAAI,KAAK,CAAC,0MAAkD,UAAY,CAAC,CAAC;;;wBAEhF,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;KAE5B;IAEY,sCAAU,GAAvB,UAAwB,UAAkB,EAAE,MAAc,EAAE,SAAmB,EAAE,MAAgB;;;;;;;wBAE/F,IAAI,CAAC,UAAU,EAAE;4BAChB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;yBAC9D;wBAE8C,qBAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAA;;wBAAhF,WAAW,GAA8B,SAAoE;wBACnF,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;wBAA9C,OAAO,GAAmB,SAAsC;wBAChE,KAAA,CAAA,KAAA,OAAO,CAAA,CAAC,mBAAmB,CAAA;wBAAC,qBAAM,WAAW,EAAA;4BAAnD,qBAAM,cAA4B,SAAiB,EAAC,EAAA;;wBAApD,SAAoD,CAAC;wBAEF,qBAAM,IAAI,CAAC,WAAW,EAAE,EAAA;;wBAArE,WAAW,GAAkC,SAAyD;wBAC5G,qBAAM,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,EAAA;;wBAAzC,SAAyC,CAAC;wBAC1C,qBAAM,WAAW,CAAC,uBAAuB,mCAA0D,EAAA;;wBAAnG,SAAmG,CAAC;6BAEhG,MAAM,EAAN,yBAAM;wBACT,qBAAM,WAAW,CAAC,WAAW,CAAC,MAAM,6BAAyC,EAAA;;wBAA7E,SAA6E,CAAC;wBACjE,KAAA,CAAA,KAAA,WAAW,CAAA,CAAC,WAAW,CAAA;wBAAC,qBAAM,OAAO,EAAA;4BAA3C,qBAAM,cAAwB,SAAa,8BAAyC,EAAA;6BAA3F,sBAAO,SAAoF,EAAC;;wBAGhF,KAAA,CAAA,KAAA,WAAW,CAAA,CAAC,SAAS,CAAA;wBAAC,qBAAM,OAAO,EAAA;6BAAzC,qBAAM,cAAsB,SAAa,8BAA0C,SAAS,EAAC,EAAA;6BAApG,sBAAO,SAA6F,EAAC;;;wBAErG,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;KAE5B;IACF,wBAAC;AAAD,CAAC,AA5ID,CAAuC,YAAY,GA4IlD","sourcesContent":["import {CadesMethods} from \"./helpers/cades-methods\";\nimport {CertificateAdjuster} from \"./helpers\";\nimport {\n\tCADESCOM_CADES_TYPE,\n\tCADESCOM_CONTENT_ENCODING_TYPE,\n\tCAPICOM_CERTIFICATE_FIND_TYPE, CAPICOM_PROPID,\n\tCAPICOM_STORE_LOCATION,\n\tCAPICOM_STORE_NAME,\n\tCAPICOM_STORE_OPEN_MODE, IAboutAsync,\n\tICertificatesAsync, ICPSignerAsync,\n\tIStoreAsync\n} from \"@delagen/cadesplugin\";\nimport {ICadesSignedDataExtendedAsync, ICertificateExtendedAsync} from \"./extensions\";\nimport {ICryptoProApi} from \"./interfaces\";\n\nexport class CryptoProApiAsync extends CadesMethods implements ICryptoProApi {\n\tpublic async about(): Promise<IAboutAsync> {\n\t\ttry {\n\t\t\treturn await this.oAbout() as IAboutAsync;\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic async getCertsList(): Promise<CertificateAdjuster[]> {\n\t\ttry {\n\t\t\tconst store: IStoreAsync = await this.oStore() as IStoreAsync;\n\t\t\tawait store.Open(\n\t\t\t\tCAPICOM_STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n\t\t\t\tCAPICOM_STORE_NAME.CAPICOM_MY_STORE,\n\t\t\t\tCAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n\t\t\t);\n\t\t\tconst certificates: ICertificatesAsync = await store.Certificates;\n\n\t\t\tif (!certificates) {\n\t\t\t\tthrow new Error(\"Нет доступных сертификатов\");\n\t\t\t}\n\n\t\t\tconst findCertificate: ICertificatesAsync = await certificates.Find(CAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_TIME_VALID);\n\t\t\tconst findCertsWithPrivateKey: ICertificatesAsync = await findCertificate.Find(\n\t\t\t\tCAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,\n\t\t\t\tCAPICOM_PROPID.CAPICOM_PROPID_KEY_PROV_INFO\n\t\t\t);\n\n\t\t\tconst count: number = await findCertsWithPrivateKey.Count;\n\n\t\t\tif (!count) {\n\t\t\t\tthrow new Error(\"Нет сертификатов с приватным ключом\");\n\t\t\t}\n\n\t\t\tconst countArray: Array<null> = Array(count).fill(null);\n\n\t\t\tconst certListPromise: CertificateAdjuster[] = await Promise.all<CertificateAdjuster>(\n\t\t\t\tcountArray.map(async (_, index: number) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst cert: ICertificateExtendedAsync = await findCertsWithPrivateKey.Item(index + 1) as ICertificateExtendedAsync;\n\t\t\t\t\t\treturn new CertificateAdjuster(\n\t\t\t\t\t\t\tawait cert.Thumbprint,\n\t\t\t\t\t\t\tawait cert.SubjectName,\n\t\t\t\t\t\t\tawait cert.IssuerName,\n\t\t\t\t\t\t\tawait cert.PrivateKey,\n\t\t\t\t\t\t\tnew Date(await cert.ValidFromDate),\n\t\t\t\t\t\t\tnew Date(await cert.ValidToDate),\n\t\t\t\t\t\t\tawait cert.SerialNumber\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new Error(`При переборе сертификатов произошла ошибка: ${e.message}`)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tawait store.Close();\n\n\t\t\treturn certListPromise;\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic async currentCadesCert(thumbprint: string): Promise<ICertificateExtendedAsync> {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\t\t\tconst store: IStoreAsync = await this.oStore() as IStoreAsync;\n\t\t\tawait store.Open(\n\t\t\t\tCAPICOM_STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n\t\t\t\tCAPICOM_STORE_NAME.CAPICOM_MY_STORE,\n\t\t\t\tCAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n\t\t\t);\n\n\t\t\tconst certificates: ICertificatesAsync = await store.Certificates;\n\t\t\tconst count: number = await certificates.Count;\n\t\t\tconst findCertificate: ICertificatesAsync = await certificates.Find(\n\t\t\t\tCAPICOM_CERTIFICATE_FIND_TYPE.CAPICOM_CERTIFICATE_FIND_SHA1_HASH,\n\t\t\t\tthumbprint\n\t\t\t);\n\n\t\t\tif (count) {\n\t\t\t\tconst certificateItem: ICertificateExtendedAsync = await findCertificate.Item(1) as ICertificateExtendedAsync;\n\t\t\t\tawait store.Close();\n\n\t\t\t\treturn await certificateItem;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Произошла ошибка при получении cертификата по thumbprint значению: ${thumbprint}`);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic async getCert(thumbprint: string): Promise<CertificateAdjuster> {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\n\t\t\tconst certList = await this.getCertsList();\n\n\t\t\tfor (let i = 0; i < certList.length; i++) {\n\t\t\t\tif (thumbprint === certList[i].thumbprint) {\n\t\t\t\t\treturn await certList[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Не найдено сертификата по thumbprint значению: ${thumbprint}`);\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tpublic async signBase64(thumbprint: string, base64: string, bDetached?: boolean, coSign?: boolean): Promise<string> {\n\t\ttry {\n\t\t\tif (!thumbprint) {\n\t\t\t\tthrow new Error(\"Не указано thumbprint значение сертификата\");\n\t\t\t}\n\n\t\t\tconst currentCert: ICertificateExtendedAsync = await this.currentCadesCert(thumbprint) as ICertificateExtendedAsync;\n\t\t\tconst oSigner: ICPSignerAsync = await this.oSigner() as ICPSignerAsync;\n\t\t\tawait oSigner.propset_Certificate(await currentCert);\n\n\t\t\tconst oSignedData: ICadesSignedDataExtendedAsync = await this.oSignedData() as ICadesSignedDataExtendedAsync;\n\t\t\tawait oSignedData.propset_Content(base64);\n\t\t\tawait oSignedData.propset_ContentEncoding(CADESCOM_CONTENT_ENCODING_TYPE.CADESCOM_BASE64_TO_BINARY);\n\n\t\t\tif (coSign) {\n\t\t\t\tawait oSignedData.VerifyCades(base64, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES);\n\t\t\t\treturn await oSignedData.CoSignCades(await oSigner, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES);\n\t\t\t}\n\n\t\t\treturn await oSignedData.SignCades(await oSigner, CADESCOM_CADES_TYPE.CADESCOM_CADES_BES, bDetached);\n\t\t} catch (e) {\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n}\n"]}