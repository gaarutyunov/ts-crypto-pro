{"version":3,"file":"parse-cert-info.js","sourceRoot":"","sources":["parse-cert-info.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,IAAI,EAAC,MAAM,cAAc,CAAC;AAGlC,MAAM,UAAU,aAAa,CAAC,IAAsB,EAAE,UAAkB;IACvE,IAAI,MAAM,GAA4B,IAAI,CAAC;IAE3C,IAAM,cAAc,GAA4B,UAAU,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;IAExH,IAAI,CAAC,CAAC,cAAc,EAAE;QACrB,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,UAAC,KAAa;YACzC,IAAM,KAAK,GAA4B,KAAK,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACvF,IAAI,KAAK,GAAkB,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,WAAW,GAAkB,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,UAAU,GAAY,KAAK,CAAC;YAChC,IAAI,QAAiC,CAAC;YAEtC,IAAI,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACnC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAErC,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAChC,IAAM,SAAS,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE5C,IAAI,CAAC,CAAC,SAAS,EAAE;wBAChB,KAAK,GAAG,SAAS,CAAC;qBAClB;iBACD;aACD;YAED,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1E,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAEtE,IAAI,CAAC,IAAI,CAAC,UAAC,cAA8B;gBACxC,OAAO,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,UAAC,YAAoB;oBAC7D,IAAM,KAAK,GAAY,YAAY,KAAK,KAAK,CAAC;oBAE9C,IAAI,KAAK,EAAE;wBACV,KAAK,GAAG,cAAc,CAAC,WAAW,CAAC;wBACnC,UAAU,GAAG,IAAI,CAAC;qBAClB;oBAED,OAAO,KAAK,CAAC;gBACd,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,cAAc,CACxB,KAAK,EACL,WAAW,EACX,UAAU,CACV,CAAC;QACH,CAAC,CAAC,CAAC;KACH;IAED,OAAO,MAAM,CAAC;AACf,CAAC","sourcesContent":["import {TagTranslation} from \"./tag-translation\";\nimport {TranslatedInfo} from \"./translated-info\";\nimport {oids} from \"../constants\";\n\n\nexport function parseCertInfo(tags: TagTranslation[], infoString: string): TranslatedInfo[] | null {\n\tlet result: TranslatedInfo[] | null = null;\n\n\tconst regExpMatchArr: RegExpMatchArray | null = infoString.match(/([а-яА-Яa-zA-Z0-9\\.]+)=(?:(\"[^\"]+?\")|(.+?))(?:,|$)/g);\n\n\tif (!!regExpMatchArr) {\n\t\tresult = regExpMatchArr.map((group: string) => {\n\t\t\tconst parts: RegExpMatchArray | null = group.match(/^([а-яА-Яa-zA-Z0-9\\.]+)=(.+?),?$/);\n\t\t\tlet title: string | null = parts && parts[1];\n\t\t\tlet description: string | null = parts && parts[2];\n\t\t\tlet translated: boolean = false;\n\t\t\tlet oidTitle: RegExpMatchArray | null;\n\n\t\t\tif (!!title && /^OID./.test(title)) {\n\t\t\t\toidTitle = title.match(/^OID\\.(.*)/);\n\n\t\t\t\tif (!!oidTitle && !!oidTitle[1]) {\n\t\t\t\t\tconst tempTitle: string = oids[oidTitle[1]];\n\n\t\t\t\t\tif (!!tempTitle) {\n\t\t\t\t\t\ttitle = tempTitle;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdescription = !!description ? description.replace(/^\"(.*)\"/, \"$1\") : null;\n\t\t\tdescription = !!description ? description.replace(/\"{2}/g, '') : null;\n\n\t\t\ttags.some((tagTranslation: TagTranslation) => {\n\t\t\t\treturn tagTranslation.possibleNames.some((possibleName: string) => {\n\t\t\t\t\tconst match: boolean = possibleName === title;\n\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\ttitle = tagTranslation.translation;\n\t\t\t\t\t\ttranslated = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn new TranslatedInfo(\n\t\t\t\ttitle,\n\t\t\t\tdescription,\n\t\t\t\ttranslated\n\t\t\t);\n\t\t});\n\t}\n\n\treturn result;\n}\n"]}